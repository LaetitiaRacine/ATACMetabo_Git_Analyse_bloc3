from snakemake.io import expand
from collections import defaultdict
from functools import partial

COMPARISON = defaultdict(dict)
SAMPLE = defaultdict(partial(defaultdict, dict))

import csv
with open('comparison_analysis_choice.csv', mode='r') as file:
	reader = csv.reader(file, delimiter=',')
	next(reader, None)  # skip the headers
	for row in reader:
		included, differential, analysis = row
		if included == "false":
			continue
		COMPARISON[analysis][differential] = differential

def list_comp_time() :
	result = []
	for analysis, differential in COMPARISON.items() :
		for differential, file in differential.items():
			if analysis == "comp_time" :
				result.append(differential)
	return result

def list_comp_cond() :
	result = []
	for analysis, differential in COMPARISON.items() :
		for differential, file in differential.items():
			if analysis == "comp_cond" :
				result.append(differential)
	return result

import csv
with open('analysis_choice.csv', mode='r') as file:
	reader = csv.reader(file)
	next(reader, None)
	for row in reader:
		included, condition, time, donor = row
		if included == "false":
			continue
		SAMPLE[condition][time][donor] = "_".join((condition, time, donor))

def list_sample():
	result = []
	for condition, times in SAMPLE.items():
		for time, donors in times.items():
			for donor, file in donors.items():
				result.append("_".join((condition, time, donor)))
	return result

print(list_comp_time())
print(list_comp_cond())
print(list_sample())

rule all :
	input :
		"D_Analysis/ATAC_multiparametric_plots/gr_union_allsamples.gr.rds"


#*******************************************************************************************************************************************************
#*** Bloc 3 : Crossed study of samples
#*******************************************************************************************************************************************************

################################################
# Exp ATAC_multiparametric_plots
################################################

rule Grange_union_all_samples :
	input : expand("A_Initial_data/merged_analysis/genomic_ranges/{sample}.gr.rds", sample = list_sample())
	output : "D_Analysis/ATAC_multiparametric_plots/gr_union_allsamples.gr.rds"
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript E_Documentation/GRanges.R --output {output} union {input} """

rule readcount_gr_allsamples :
	input :
		gr = "D_Analysis/ATAC_multiparametric_plots/gr_union_allsamples.gr.rds",
		bam_files = expand(A_Initial_data/merged_analysis/bam/{sample}.bam, sample = list_sample())
	output :
		rds = readcount_union_allsamples.rds
		txt =
		csv =
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript E_Documentation/peaks_featureCounts.R \\
					--output_rds {output.rds} \\
					--output_tx {output.txt} \\
					--output_csv {output.csv} \\
					{input.csv} {input.bam_files}
			"""



#
#  # séparation de la conversion en bed et de la rule homer
# rule Convert_csvtobed :
#   input : "{file}_ann.csv"
#   output : "{file}_ann.bed"
#   conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
#   shell : """ sed 's/\"//g' {input} | sed 1d | cut -f 2-4 -d ';' --output-delimiter=$'\t' > {output} """
#
# rule Homer_motif :
#   input : input1 = rules.Convert_to_bed.output,
#           input2 = "results/genomic_ranges/annotated_bed/peaks_intersection_{variable_part}_ann.bed"
#   output : "results/homer_output/{variable_part}/known_Results.html"
#   conda : "B_Environments/homer_test.yaml" # préciser qu'il faut installer homer et hg19 sur l'ordi
#   params : prefix = "{variable_part}"
#   shell : """ findMotifsGenome.pl {input.input2} hg19 results/homer_output/{params.prefix}/ -size given -S 100 """
# # problème avec le hg19 ? l'environnement créé via le yaml pose problème il ne contient pas les fichiers chrosomes
#
#
#
