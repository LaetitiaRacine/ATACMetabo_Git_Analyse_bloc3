from snakemake.io import expand
from collections import defaultdict
from functools import partial

SAMPLE = defaultdict(dict)

import csv
with open('comparison_analysis_choice.csv', mode='r') as file:
	reader = csv.reader(file, delimiter=',')
	next(reader, None)  # skip the headers
	for row in reader:
		included, comparison, analysis = row
		if included == "false":
			continue
		SAMPLE[analysis][comparison] = comparison

def list_comp_time() :
	result = []
	for analysis, comparison in SAMPLE.items() :
		for comparison, file in comparison.items():
			if analysis == "comp_time" :
				result.append(comparison)
	return result

def list_comp_cond() :
	result = []
	for analysis, comparison in SAMPLE.items() :
		for comparison, file in comparison.items():
			if analysis == "comp_cond" :
				result.append(comparison)
	return result

print(list_comp_time())
print(list_comp_cond())


rule all :
	input :
		expand("D_Analysis/ATAC_differential_accessibility/{comparison}_threshold_10_ann.gr.rds", comparison = list_comp_time()),
		expand("D_Analysis/ATAC_differential_accessibility/{comparison}_threshold_10_ann.gr.rds", comparison = list_comp_cond()),
		expand("D_Analysis/ATAC_differential_accessibility/readcount_{comparison}.rds", comparison = list_comp_time()),
		expand("D_Analysis/ATAC_differential_accessibility/readcount_{comparison}.rds", comparison = list_comp_cond()),
		expand("D_Analysis/ATAC_differential_accessibility/featurecounts_{comparison}.txt", comparison = list_comp_time()),
		expand("D_Analysis/ATAC_differential_accessibility/featurecounts_{comparison}.txt", comparison = list_comp_cond()),
        expand("D_Analysis/ATAC_differential_accessibility/readcount_{comparison}.csv", comparison = list_comp_time()),
		expand("D_Analysis/ATAC_differential_accessibility/readcount_{comparison}.csv", comparison = list_comp_cond())



##############################################################################################
### Experiment : ATAC_differential_accessibility
##############################################################################################

rule differential_peaks_union :
	input:
		"A_Initial_data/merged_analysis/genomic_ranges/{condition1}_{time1}_{donors1}_threshold_10_ann.gr.rds",
		"A_Initial_data/merged_analysis/genomic_ranges/{condition2}_{time2}_{donors2}_threshold_10_ann.gr.rds"
	output: "D_Analysis/ATAC_differential_accessibility/{condition2}_{time2}_{donors2}_vs_{condition1}_{time1}_{donors1}_threshold_10_ann.gr.rds"
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript C_Scripts/GRanges.R union -o {output} {input} """

rule differential_peaks_featureCounts :
	input :
		bam1 = "A_Initial_data/merged_analysis/downsampled_bam/{condition1}_{time1}_{donors1}_downsampled.bam",
		bam2 = "A_Initial_data/merged_analysis/downsampled_bam/{condition2}_{time2}_{donors2}_downsampled.bam",
		union = "D_Analysis/ATAC_differential_accessibility/{condition2}_{time2}_{donors2}_vs_{condition1}_{time1}_{donors1}_threshold_10_ann.gr.rds"
	output :
		readcount = "D_Analysis/ATAC_differential_accessibility/readcount_{condition2}_{time2}_{donors2}_vs_{condition1}_{time1}_{donors1}.rds",
		featurecounts = "D_Analysis/ATAC_differential_accessibility/featurecounts_{condition2}_{time2}_{donors2}_vs_{condition1}_{time1}_{donors1}.txt",
		csv = "D_Analysis/ATAC_differential_accessibility/readcount_{condition2}_{time2}_{donors2}_vs_{condition1}_{time1}_{donors1}.csv"
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript C_Scripts/peaks_union_featureCounts.R \\
					--output_rds {output.readcount} \\
					--output_txt {output.featurecounts} \\
					--output_csv {output.csv} \\
					{input.union} {input.bam1} {input.bam2} """

# rule differential_peaks_DEseq :


# rule DEseq_Differential_Peaks_Union :
# 	input : rules.ReadCount_Static_Peaks_Intersection.output
# 	output : expand("results/readCount_output/readCount_{differential}.rda", differential = DIFFERENTIAL),
# 	         expand("results/DEseq_output/DEseq2_results_{differential}.txt", differential = DIFFERENTIAL),
# 	         expand("results/genomic_ranges/differential_peaks/peaks_{modulation}_{differential}_gr.rda", modulation = MODULATION, differential = DIFFERENTIAL),
# 	         expand("results/readCount_output/featuresCount_{differential}.txt", differential = DIFFERENTIAL)
# 	conda : "B_Environments/DEseq2_env.yaml"
# 	shell : """ Rscript C_Scripts/02_DEseq_Differential_Peaks_Union.R """
#
#
#
# rule Plot_volcano :
#   input : rules.Annotate_grange.output
#   output : expand("results/plot/volcano_{differential}.png", differential = DIFFERENTIAL),
#            expand("results/plot/volcano_TSS_Intergenic_{differential}.png", differential = DIFFERENTIAL)
#   conda : "B_Environments/volcano_env.yaml"
#   shell : """ Rscript C_Scripts/05_Plot_volcano.R """



#################################################
### Experiment : ATAC_peaks_annotation
#################################################

# rule plot_annotation :
# input :
# 	output : expand("results/plot/features_histogram_{analysis}_analysis_{condition}.png", analysis = ANALYSIS, condition = CONDITION),
# 	           expand("results/plot/total_peak_nb_histogram_{condition}.png", condition = CONDITION),
# 	           expand("results/plot/TSS_Exon_Intron_Intergenic_histogram_{condition}.png", condition = CONDITION)
# 	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
# 	shell : """ Rscript C_Scripts/04_Plot_features_histogram.R {param.directory}"""
#






#################################################
### Experiment : ATAC
#################################################

# # répartition des peaks sur les chromosomes
#
#```{r}

#
#
#  # séparation de la conversion en bed et de la rule homer
# rule Convert_csvtobed :
#   input : "{file}_ann.csv"
#   output : "{file}_ann.bed"
#   conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
#   shell : """ sed 's/\"//g' {input} | sed 1d | cut -f 2-4 -d ';' --output-delimiter=$'\t' > {output} """
#
# rule Homer_motif :
#   input : input1 = rules.Convert_to_bed.output,
#           input2 = "results/genomic_ranges/annotated_bed/peaks_intersection_{variable_part}_ann.bed"
#   output : "results/homer_output/{variable_part}/known_Results.html"
#   conda : "B_Environments/homer_test.yaml" # préciser qu'il faut installer homer et hg19 sur l'ordi
#   params : prefix = "{variable_part}"
#   shell : """ findMotifsGenome.pl {input.input2} hg19 results/homer_output/{params.prefix}/ -size given -S 100 """
# # problème avec le hg19 ? l'environnement créé via le yaml pose problème il ne contient pas les fichiers chrosomes
#



#
#
##############################################################################################
### Experiment : ATAC_gene_coverage
##############################################################################################

# rule Gene_coverage :
# 	  input : rules.DEseq_Differential_Peaks_Union.output
# 	  output : expand("results/Gene_coverage/{condition}_{region}_Coverage_plot.txt", condition = CONDITION, region = REGION)
# 	  conda : "B_Environments/gviz_env.yaml"
# 	  shell : """ Rscript C_Scripts/06_Gene_coverage.R """


# rule Gene_Ontology :
# input :
# output :
# conda :
# shell : """ """
