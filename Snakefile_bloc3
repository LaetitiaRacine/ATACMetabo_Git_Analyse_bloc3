from snakemake.io import expand
from collections import defaultdict
from functools import partial

COMPARISON = defaultdict(dict)
SAMPLE = defaultdict(partial(defaultdict, dict))

import csv
with open('comparison_analysis_choice.csv', mode='r') as file:
	reader = csv.reader(file, delimiter=',')
	next(reader, None)  # skip the headers
	for row in reader:
		included, differential, analysis = row
		if included == "false":
			continue
		COMPARISON[analysis][differential] = differential

def list_comp_time() :
	result = []
	for analysis, differential in COMPARISON.items() :
		for differential, file in differential.items():
			if analysis == "comp_time" :
				result.append(differential)
	return result

def list_comp_cond() :
	result = []
	for analysis, differential in COMPARISON.items() :
		for differential, file in differential.items():
			if analysis == "comp_cond" :
				result.append(differential)
	return result

import csv
with open('analysis_choice.csv', mode='r') as file:
	reader = csv.reader(file)
	next(reader, None)
	for row in reader:
		included, condition, time, donor = row
		if included == "false":
			continue
		SAMPLE[condition][time][donor] = "_".join((condition, time, donor))

def list_sample():
	result = []
	for condition, times in SAMPLE.items():
		for time, donors in times.items():
			for donor, file in donors.items():
				result.append("_".join((condition, time, donor)))
	return result

print(list_comp_time())
print(list_comp_cond())
print(list_sample())

rule all :
	input :
		"D_Analysis/ATAC_nbpeak_annotation/plot_nbpeaks_pertime.png",
		"D_Analysis/ATAC_nbpeak_annotation/plot_nbpeaks_percond.png",
		"D_Analysis/ATAC_nbpeak_annotation/plot_nbpeaks_annotation_pertime.png",
		"D_Analysis/ATAC_nbpeak_annotation/plot_nbpeaks_annotation_percond.png",
		"D_Analysis/ATAC_nbpeak_annotation/nbpeaks_per_annot_report.csv",
		expand("D_Analysis/ATAC_nbpeak_annotation/plot_upset_{sample}.png", sample = list_sample()),
		expand("D_Analysis/ATAC_nbpeak_annotation/plot_upset_zoom_{sample}.png", sample = list_sample())



#*******************************************************************************************************************************************************
#*** Bloc 3 : Crossed study of samples
#*******************************************************************************************************************************************************

#################################################
### Experiment : ATAC_peaks_annotation
#################################################

rule table_recap_nbpeaks :
	output : "D_Analysis/ATAC_nbpeak_annotation/nbpeaks_per_annot_report.csv"
	params : gr_directory = "A_Initial_data/merged_analysis/genomic_ranges/"
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript C_Scripts/ATAC_plot_peaks_annotation.R table {params.gr_directory} {output} """

rule plot_nbpeaks_annot :
	wildcard_constraints :
		graph = "nbpeaks|nbpeaks_annotation",
		facet = "pertime|percond"
	input :
		tab_nbpeaks = "A_Initial_data/merged_analysis/reports/nbpeaks_report.csv",
		tab_annot_long = "D_Analysis/ATAC_nbpeak_annotation/nbpeaks_per_annot_report.csv"
	output : "D_Analysis/ATAC_nbpeak_annotation/plot_{graph}_{facet}.png"
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript C_Scripts/ATAC_plot_peaks_annotation.R {wildcards.graph} {input.tab_nbpeaks} {input.tab_annot_long} {wildcards.facet} {output} """

rule plot_annot_upset :
	wildcard_constraints :
		graph = "upset|upset_zoom",
		sample = "\w{2,5}_\d{2}h_D\d(-D\d)+"
	input : "A_Initial_data/merged_analysis/genomic_ranges/{sample}_ann.gr.rds"
	output : "D_Analysis/ATAC_nbpeak_annotation/plot_{graph}_{sample}.png"
	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
	shell : """ Rscript C_Scripts/ATAC_plot_peaks_annotation.R {wildcards.graph} {input} {output} """



#################################################
### Experiment : ATAC
#################################################

#  # séparation de la conversion en bed et de la rule homer
# rule Convert_csvtobed :
#   input : "{file}_ann.csv"
#   output : "{file}_ann.bed"
#   conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
#   shell : """ sed 's/\"//g' {input} | sed 1d | cut -f 2-4 -d ';' --output-delimiter=$'\t' > {output} """
#
# rule Homer_motif :
#   input : input1 = rules.Convert_to_bed.output,
#           input2 = "results/genomic_ranges/annotated_bed/peaks_intersection_{variable_part}_ann.bed"
#   output : "results/homer_output/{variable_part}/known_Results.html"
#   conda : "B_Environments/homer_test.yaml" # préciser qu'il faut installer homer et hg19 sur l'ordi
#   params : prefix = "{variable_part}"
#   shell : """ findMotifsGenome.pl {input.input2} hg19 results/homer_output/{params.prefix}/ -size given -S 100 """
# # problème avec le hg19 ? l'environnement créé via le yaml pose problème il ne contient pas les fichiers chrosomes
#

# rule Gene_coverage :
# 	  input : rules.DEseq_Differential_Peaks_Union.output
# 	  output : expand("results/Gene_coverage/{condition}_{region}_Coverage_plot.txt", condition = CONDITION, region = REGION)
# 	  conda : "B_Environments/gviz_env.yaml"
# 	  shell : """ Rscript C_Scripts/06_Gene_coverage.R """
#
#
# rule Plot_volcano :
#   input : rules.Annotate_grange.output
#   output : expand("results/plot/volcano_{differential}.png", differential = DIFFERENTIAL),
#            expand("results/plot/volcano_TSS_Intergenic_{differential}.png", differential = DIFFERENTIAL)
#   conda : "B_Environments/volcano_env.yaml"
#   shell : """ Rscript C_Scripts/05_Plot_volcano.R """
