
from snakemake.io import expand
from collections import defaultdict
from functools import partial

SAMPLE = defaultdict(partial(defaultdict, dict))

import csv
with open('analysis_choice.csv', mode='r') as file:
	reader = csv.reader(file)
	next(reader, None)
	for row in reader:
		included, condition, time, donor, manip, raw_file = row
		if included == "false":
			continue
		SAMPLE[condition][time][donor] = raw_file

def list_sample_intersect() :
	result = []
	for condition, times in SAMPLE.items():
		for time, donors in times.items():
			result.append("_".join((condition, time, ",".join(donors.keys()))))
	return result


rule all :
	input :
		expand("D_Analysis/genomic_ranges/{sample}_ann.gr.rds", sample = list_sample_intersect())

# Règle faisant appel à un script R externe pour faire l'intersection des peaks entre donneurs
# On conserve les peaks présents chez les tous les donneurs : on prend la partie en commune (peak plus petit) de tous les peaks des donneurs
rule donors_intersection :
  	input : lambda wildcards : expand("A_Initial_data/D_Analysis_separated/genomic_ranges/{{condition}}_{{time}}_{donor}_ann.gr.rds", donor=wildcards.list_donors.split(","))
 	output : "D_Analysis/genomic_ranges/{condition}_{time}_{list_donors}_ann.gr.rds"
 	conda : "B_Environments/ATACMetabo_main_env.locked.yaml"
 	shell : """ Rscript C_Scripts/GRanges.R intersect -o {output} {input} """
